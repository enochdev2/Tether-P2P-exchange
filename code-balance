 <h1 className="text-3xl sm:text-4xl md:text-5xl font-bold leading-tight">
            The Secure,
          </h1>
          <h1 className="text-3xl sm:text-5xl md:text-[58px] font-bold text-green-600">
            People-powered way to
          </h1>
          <h1 className="text-3xl sm:text-4xl md:text-5xl font-bold">
            Exchange your USDT <span className="text-green-600">â†’</span>
          </h1>

            <p className="text-base sm:text-lg md:text-xl font-medium text-gray-300">
            Effortlessly exchange with complete transparency, security, and
            convenience. Your journey to financial freedom starts here.
          </p>


          <Link
                  className="bg-gray-800 text-white px-8 py-2 rounded-md text-base font-medium hover:bg-gray-700 sm:w-auto w-full transition"
                  to="signin"
                >
                  Sign In
                </Link>
                <Link
                  className="bg-green-500 text-white px-8 py-2 rounded-md text-base font-medium hover:bg-green-600 sm:w-auto w-full transition"
                  to="signin"
                >
                  Sign Up
                </Link>


                bg-green-800

                ease-in-out transition-all duration-300




import React, { useState } from "react";
import { Link } from "react-router-dom";
import { CheckCircle, Clock, ChevronDown, Star } from "lucide-react";
import TradeCard2 from "../../components/TradeCard2";
import BuyTetherComponent from "../../components/BuyTetherComponent";
import { useEffect } from "react";
import LoadingSpiner from "../../components/LoadingSpiner";

const TransactionHistory = () => {
  const [activeLink, setActiveLink] = useState("findOffers");
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchSellOrders();
  }, []);

  // Function to fetch buy orders, optionally filtered by status
  async function fetchSellOrders(status = "") {
    try {
      // Build the URL with optional status query parameter
      const url = status
        ? `https://tether-p2p-exchang-backend.onrender.com/api/v1/sell/all-orders?status=${encodeURIComponent(
            status
          )}`
        : "https://tether-p2p-exchang-backend.onrender.com/api/v1/sell/all-orders";
          // "https://tether-p2p-exchang-backend.onrender.com/api/v1/sell/all-orders";

      // Assuming you have an auth token stored in localStorage or cookie
      // const token = localStorage.getItem("authToken");

      const response = await fetch(url, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
      });

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      const allOrders = await response.json();
      console.log("Fetched all orders:", allOrders);

      const combinedOrders = allOrders.combinedOrders || [];

      // Sort by createdAt descending (newest first)
      combinedOrders.sort(
        (a, b) => new Date(b.createdAt) - new Date(a.createdAt)
      );

      setOrders(combinedOrders);

      return allOrders;
    } catch (error) {
      console.error("Failed to fetch sell orders:", error);
      return null;
    } finally {
      setLoading(false);
    }
  }

  // Example data for trading offers
  const offers = [
    {
      id: 1,
      action: "Sell",
      usdtAmount: 503.56,
      krwAmount: 700000,
      status: "Sell completed",
      statusDate: "2025-05-20",
      statusTime: "18:55:57",
    },
    {
      id: 2,
      action: "Buy",
      usdtAmount: 510.12,
      krwAmount: 705000,
      status: "Buy Completed",
      statusDate: "2025-05-19",
      statusTime: "18:55:57",
    },
    {
      id: 3,
      action: "Buy",
      usdtAmount: 499.98,
      krwAmount: 695000,
      status: "Buy completed",
      statusDate: "2025-05-13",
      statusTime: "18:55:57",
    },
    {
      id: 4,
      action: "Sell",
      usdtAmount: 503.56,
      krwAmount: 700000,
      status: "Sell completed",
      statusDate: "2025-04-28",
      statusTime: "18:55:57",
    },
    {
      id: 5,
      action: "Sell",
      usdtAmount: 502.34,
      krwAmount: 699000,
      status: "Sell completed",
      statusDate: "2025-04-20",
      statusTime: "18:55:57",
    },
    {
      id: 6,
      action: "Buy",
      usdtAmount: 508.44,
      krwAmount: 702000,
      status: "Buy Completed",
      statusDate: "2025-05-20",
      statusTime: "18:55:57",
    },
  ];

  const handleLinkClick = (link) => {
    setActiveLink(link); // Set active link when clicked
  };

  return (
    <div className="flex md:px-10 lg:space-x-10 bg-gray-100 pt-18 min-h-screen">
      {/* Sidebar Section */}
      <div className="w-1/4 bg-white p-6 shadow-lg space-y-6">
        <h2 className="text-2xl font-bold">Find Transaction History</h2>
        {/* Filters */}
        <div className="space-y-4">
          <div className="flex items-center space-x-2">
            <span>Tether</span>
            <ChevronDown className="w-4 h-4" />
          </div>

          <div>
            <input
              type="number"
              placeholder="Enter amount"
              className="w-full p-2 border rounded-md mt-2"
            />
          </div>

          <div className="flex items-center space-x-2">
            <span>Trader Location</span>
            <ChevronDown className="w-4 h-4" />
          </div>
          <div className="flex items-center space-x-2">
            <span>Recently Trade</span>
            <input type="checkbox" />
          </div>
          <div className="flex items-center space-x-2">
            <span>Pending Offers</span>
            <input type="checkbox" />
          </div>
        </div>

        {/* Find Offers Button */}
        <button
          onClick={() => handleLinkClick("findOffers")}
          className="w-full py-3 bg-green-500 text-white rounded-md mt-6"
        >
          Find History
        </button>
      </div>

      {/* Main Content Section */}
      <div className="flex-1 p-6 overflow-y-auto">
        <BuyTetherComponent />
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold text-green-600 mt-5">
            Transaction History
          </h1>

          <div className="space-x-4">
            <button className="bg-gray-200 px-4 py-2 rounded-md">
              Sort By
            </button>
          </div>
        </div>

        {/* Map Over Offers Data */}
        <div className="space-y-4">
          {orders.map((offer, index) => (
            <TradeCard2 key={index} offer={offer} loading={loading} />
          ))}
        </div>
      </div>
    </div>
  );
};

export default TransactionHistory;




const BuyTetherComponent = () => {
  return (
    <div className="p-6 bg-white shadow-lg rounded-md mb-6 md:mb-8">
      {/* Title */}
      <h1 className="text-2xl sm:text-3xl font-bold mb-3 text-gray-900">
        Trade your Tether (USDT).
      </h1>

      {/* Description */}
      <p className="text-gray-600 mb-6 text-sm sm:text-base leading-relaxed">
        Trade Tether with over 500 payment methods to choose from, including bank transfers, online wallets, and gift cards.
      </p>

      {/* Promoted Offers Section */}
      <button
        className="w-full py-3 bg-green-800 hover:bg-green-700 transition-colors duration-300 font-semibold text-white rounded-md focus:outline-none focus:ring-4 focus:ring-[#26a17b]/50"
        aria-label="Promoted offers"
      >
        Promoted offers
      </button>
    </div>
  );
};

export default BuyTetherComponent;



import React, { useEffect } from "react";
import { Link, Outlet, useNavigate } from "react-router-dom";
import Sidebar from "./Sidebar";
import { CheckCircle, Shield, Phone, ShieldAlertIcon } from "lucide-react";
import { useAuth } from "../../utils/AuthProvider";
import InfoCard from "../../components/InfoCard";

function Dashboard() {
  // const { user, setIsLoggedIn, setUser } = useAuth();
  // const navigate = useNavigate();

  // useEffect(() => {
  //   const storedUser = localStorage.getItem("user");
  //   const storedIsLoggedIn = localStorage.getItem("isLoggedIn");

  //   if (storedUser && storedIsLoggedIn === "true") {
  //     setUser(JSON.parse(storedUser));
  //     setIsLoggedIn(true);
  //   } else {
  //     ("isLoggedIn");
  //     if (!user) {
  //       navigate("/");
  //     }
  //   }
  // }, []);

  return (
    <div className="flex min-h-screen pt-18 bg-gray-100">
      {/* Sidebar */}
      <Sidebar />

      {/* Content Area */}
      <div className="lg:w-3/4 lg:p-6 overflow-y-hidden ">
        {/* Dashboard Header */}
        <div className="w-full px-4 py-10 bg-gray-50">
          <div className="flex sm:grid gap-4 sm:gap-6 sm:grid-cols-2 lg:grid-cols-3 max-w-7xl mx-auto overflow-x-auto sm:overflow-visible">
            <div className="min-w-[280px] sm:min-w-0">
              <InfoCard
                icon={<CheckCircle className="w-6 h-6" />}
                title="Account Level: 1"
              />
            </div>

            <div className="min-w-[280px] sm:min-w-0">
              <InfoCard
                icon={<Phone className="w-6 h-6" />}
                title="You're Phone Verified"
                actionText="Phone Number Verified"
                onAction={() => console.log("Redirect to phone setup")}
              />
            </div>

            <div className="min-w-[280px] sm:min-w-0">
              <InfoCard
                icon={<Shield className="w-6 h-6" />}
                title="2FA Not Enabled"
                actionText="Setup 2FA"
                onAction={() => console.log("Redirect to 2FA setup")}
              />
            </div>
          </div>
        </div>

        {/* Render nested components */}
        <Outlet />
      </div>
    </div>
  );
}

export default Dashboard;



import React from 'react';

export default function InfoCard({
  icon,
  title,
  children,
  actionText = '',
  onAction,
}) {
  return (
    <div className="bg-white p-6 rounded-2xl shadow-sm hover:shadow-md transition duration-300 w-full sm:max-w-sm min-h-[100px] flex flex-col justify-between">
      <div className="flex items-center gap-4">
        <div className="w-12 h-12 rounded-full bg-gradient-to-br from-[#26a17b] to-[#0d4e3a] text-white flex items-center justify-center shrink-0">
          {icon}
        </div>
        <h3 className="text-lg font-semibold text-gray-800">{title}</h3>
      </div>

      {children && (
        <p className="text-sm text-gray-500 mt-4">
          {children}
        </p>
      )}

      {actionText && (
        <button
          onClick={onAction}
          className="mt-4 text-sm text-indigo-600 hover:text-indigo-800 font-medium"
        >
          {actionText}
        </button>
      )}
    </div>
  );
}


[#26a17b]
bg-gradient-to-br from-[#26a17b] to-[#0d4e3a]





// PROFILE LAST SEEN ACTIVE AND INACTIVE
<div className="bg-white shadow-lg rounded-2xl p-6 w-full max-w-4xl mx-auto flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-6 sm:space-y-0 sm:space-x-6">
      {/* Profile Image & Info */}
      <div className="relative flex items-center space-x-4">
        {/* Status Badge (Mobile) */}
        <span
          className={`absolute -top-3 -left-3 px-3 py-1 text-xs font-medium rounded-full ${
            isActive ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
          } sm:hidden`}
        >
          {isActive ? 'Active' : 'Inactive'}
        </span>

        <div className={`rounded-full p-1 ${isActive ? 'ring-2 ring-green-400' : 'ring-2 ring-red-400'}`}>
          <img
            src="https://i.pravatar.cc/150?img=43"
            alt="User Avatar"
            className="w-20 h-20 sm:w-24 sm:h-24 rounded-full object-cover bg-gray-100 shadow-md"
          />
        </div>

        <div>
          <h2 className="font-bold text-lg capitalize sm:text-xl text-gray-800">
            {user?.fullName || 'Anonymous User'}
          </h2>
          {/* <p className="text-sm text-gray-500">Seen 50 minutes ago</p> */}
        </div>
      </div>

      {/* Status Badge (Desktop) */}
      <div className="hidden sm:flex sm:items-center sm:justify-center">
        <span
          className={`px-4 py-2 rounded-full font-medium text-sm sm:text-base shadow-sm ${
            isActive ? 'bg-green-500 text-white' : 'bg-red-600 text-white'
          }`}
        >
          {isActive ? 'Active' : 'Inactive'}
        </span>
      </div>

      {/* Social Media Section */}
      {/* <div className="flex flex-col items-center sm:items-end">
        <span className="text-xs text-gray-500 mb-2">Connect</span>
        <div className="flex space-x-3">
          <a
            href="#"
            className="bg-blue-500 hover:bg-blue-600 text-white p-2 rounded-full transition"
          >
            <Twitter size={18} />
          </a>
          <a
            href="#"
            className="bg-blue-700 hover:bg-blue-800 text-white p-2 rounded-full transition"
          >
            <Facebook size={18} />
          </a>
          <a
            href="#"
            className="bg-[#0077b5] hover:bg-[#005f91] text-white p-2 rounded-full transition"
          >
            <Linkedin size={18} />
          </a>
          <a
            href="#"
            className="bg-gray-600 hover:bg-gray-800 text-white p-2 rounded-full transition"
          >
            <Mail size={18} />
          </a>
        </div>
      </div> */}
</div>
    



// Account Level: 1
 <div className="flex items-center sm:grid gap-4 sm:gap-6 sm:grid-cols-2 lg:grid-cols-3 max-w-7xl mx-auto overflow-x-auto sm:overflow-visible">
            <div className="min-w-[280px] sm:min-w-0">
              <InfoCard
                icon={<CheckCircle className="w-6 h-6" />}
                title="Account Level: 1"
              />
            </div>

            {/* <div className="min-w-[280px] sm:min-w-0">
              <InfoCard
                icon={<Phone className="w-6 h-6" />}
                title="You're Phone Verified"
                actionText="Phone Number Verified"
                onAction={() => console.log("Redirect to phone setup")}
              />
            </div>

            <div className="min-w-[280px] sm:min-w-0">
              <InfoCard
                icon={<Shield className="w-6 h-6" />}
                title="2FA Not Enabled"
                actionText="Setup 2FA"
                onAction={() => console.log("Redirect to 2FA setup")}
              />
            </div> */}
          </div>